import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
CATEGORY_KEYWORDS = {
    "–ú—è—Å–æ": ["–≥–æ–≤—è–¥–∏–Ω–∞", "–±–∞—Ä–∞–Ω–∏–Ω–∞", "—Å–≤–∏–Ω–∏–Ω–∞", "–º—è—Å–æ", "—Ñ–∞—Ä—à"],
    "–ü—Ç–∏—Ü–∞": ["–∫—É—Ä", "–∏–Ω–¥–µ–π–∫", "—É—Ç–∫", "–±–µ–¥—Ä–æ", "–≥—Ä—É–¥–∫"],
    "–†—ã–±–∞/–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã": ["–ª–æ—Å–æ—Å—å", "—Ç—É–Ω–µ—Ü", "–¥–æ—Ä–∞–¥–æ", "—Ñ–∏–ª–µ", "–∫—Ä–µ–≤–µ—Ç–∫", "–∫–∞–ª—å–º–∞—Ä", "—Ç—Ä–µ—Å–∫", "—Ñ–æ—Ä–µ–ª—å", "—Å–∏–±–∞—Å", "—Ä—ã–±"],
    "–°—ã—Ä": ["—Å—ã—Ä", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–ø–∞—Ä–º–µ–∑–∞–Ω", "—Ñ–µ—Ç–∞", "–±—Ä–∏"],
    "–ú–æ–ª–æ—á–∫–∞": ["—Å–ª–∏–≤–∫", "–º–∞—Å–ª–æ", "–º–æ–ª–æ–∫", "–π–æ–≥—É—Ä—Ç", "—Å–º–µ—Ç–∞–Ω"],
    "–§—Ä—É–∫—Ç—ã/–æ–≤–æ—â–∏": ["–ø–æ–º–∏–¥", "—Ç–æ–º–∞—Ç", "–æ–≥—É—Ä", "–ª—É–∫", "–∫–∞—Ä—Ç–æ—Ñ", "–ª–∏–º–æ–Ω", "—è–±–ª–æ–∫", "–∞–ø–µ–ª—å—Å", "–∑–µ–ª–µ–Ω—å", "–∫–∞–ø—É—Å—Ç", "–ø–µ—Ä–µ—Ü", "–±–∞–∫–ª–∞–∂–∞–Ω", "—Ñ—Ä—É–∫—Ç", "–æ–≤–æ—â", "–º–∞–Ω–≥–æ", "–≤–∏–Ω–æ–≥—Ä–∞–¥", "–≥—Ä–∞–Ω–∞—Ç", "–≥—Ä—É—à–∞", "–∞–Ω–∞–Ω–∞—Å", "–º–æ—Ä–∫–æ–≤"],
    "–ë–∞–∫–∞–ª–µ—è": ["–º—É–∫–∞", "—Å–∞—Ö–∞—Ä", "—Å–æ–ª—å", "—Ä–∏—Å", "–∫—Ä—É–ø–∞", "—Å–ø–µ—Ü", "–º–∞—Å–ª–æ", "–≥—Ä–µ—á–∫", "–æ–≤—Å—è–Ω", "–º–∞–∫–∞—Ä–æ–Ω", "–∫–∞–∫–∞–æ"],
    "–•–ª–µ–±/–≤—ã–ø–µ—á–∫–∞": ["–ª–∞–≤–∞—à", "–±—É–ª–∫", "—Ö–ª–µ–±", "–ª–µ–ø–µ—à", "—Ç–æ—Ä—Ç–∏–ª—å", "–ø–∏—Ç–∞", "–±–∞–≥–µ—Ç"],
    "–°–æ—É—Å—ã": ["—Å–æ—É—Å", "–∫–µ—Ç—á—É–ø", "–≥–æ—Ä—á–∏—Ü", "–º–∞–π–æ–Ω–µ–∑", "–ø–∞—Å—Ç–∞", "–∞–¥–∂–∏–∫"],
    "–ü—Ä–æ—á–µ–µ": []
}

def assign_category(product):
    name = product.lower()
    for category, keywords in CATEGORY_KEYWORDS.items():
        if any(kw in name for kw in keywords):
            return category
    return "–ü—Ä–æ—á–µ–µ"

@st.cache_data
def load_data():
    df = pd.read_excel("–§—É–¥–∫–æ—Å—Ç.xlsx", sheet_name=None, skiprows=6)
    all_detailed = []
    for sheet, data in df.items():
        if sheet in ["–§—É–¥–∫–æ—Å—Ç", "–¶–µ–Ω—ã —Å –Ω–æ–≤—ã–º —Ñ—É–¥–∫–æ—Å—Ç–æ–º"]:
            continue
        if data.shape[1] < 9:
            continue
        try:
            current_date = None
            for i in range(len(data)):
                row_text = str(data.iloc[i, 1])
                match = re.search(r"(\d{2})\.(\d{2})\.(\d{4})", row_text)
                if match:
                    current_date = pd.to_datetime(match.group(0), dayfirst=True)
                if pd.notna(data.iloc[i, 3]) and isinstance(data.iloc[i, 3], str):
                    row = {
                        "–¢–æ–≤–∞—Ä": data.iloc[i, 3],
                        "–ï–¥. –∏–∑–º.": data.iloc[i, 5],
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": pd.to_numeric(data.iloc[i, 6], errors="coerce"),
                        "–°—Ç–æ–∏–º–æ—Å—Ç—å": pd.to_numeric(data.iloc[i, 8], errors="coerce"),
                        "–ö—É—Ä—Å": sheet,
                        "–î–∞—Ç–∞": current_date
                    }
                    all_detailed.append(row)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏—Å—Ç–∞ '{sheet}': {e}")
            continue
    df_final = pd.DataFrame(all_detailed)
    df_final = df_final.dropna(subset=["–¢–æ–≤–∞—Ä", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
    df_final = df_final[(df_final["–°—Ç–æ–∏–º–æ—Å—Ç—å"] < 0) & (df_final["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] > 0)]
    df_final["–°—Ç–æ–∏–º–æ—Å—Ç—å"] = df_final["–°—Ç–æ–∏–º–æ—Å—Ç—å"].abs()
    df_final["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = df_final["–¢–æ–≤–∞—Ä"].apply(assign_category)
    df_final["–ú–µ—Å—è—Ü"] = df_final["–î–∞—Ç–∞"].dt.to_period("M").astype(str)
    return df_final

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = load_data()

st.title("üìä –î—ç—à–±–æ—Ä–¥ –ø–æ —Ñ—É–¥–∫–æ—Å—Ç—É –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")

# –§–∏–ª—å—Ç—Ä—ã
with st.sidebar:
    st.header("–§–∏–ª—å—Ç—Ä—ã")
    selected_course = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å—ã", options=sorted(df["–ö—É—Ä—Å"].dropna().unique()))
    selected_unit = st.multiselect("–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è", options=sorted(df["–ï–¥. –∏–∑–º."].dropna().unique()))
    selected_category = st.multiselect("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", options=sorted(df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].dropna().unique()))
    selected_month = st.selectbox("–ú–µ—Å—è—Ü –∑–∞–∫—É–ø–∫–∏", options=sorted(df["–ú–µ—Å—è—Ü"].dropna().unique()), index=len(df["–ú–µ—Å—è—Ü"].unique())-1)

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
filtered = df.copy()
if selected_course:
    filtered = filtered[filtered["–ö—É—Ä—Å"].isin(selected_course)]
if selected_unit:
    filtered = filtered[filtered["–ï–¥. –∏–∑–º."].isin(selected_unit)]
if selected_category:
    filtered = filtered[filtered["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].isin(selected_category)]
if selected_month:
    filtered = filtered[filtered["–ú–µ—Å—è—Ü"] == selected_month]

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
grouped = (
    filtered.groupby(["–¢–æ–≤–∞—Ä", "–ï–¥. –∏–∑–º.", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"])
    .agg({"–°—Ç–æ–∏–º–æ—Å—Ç—å": "sum", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "sum", "–ö—É—Ä—Å": lambda x: ", ".join(sorted(set(x)))})
    .reset_index()
    .rename(columns={"–ö—É—Ä—Å": "–ö—É—Ä—Å—ã"})
)

# –¢–∞–±–ª–∏—Ü–∞
st.subheader("üì¶ –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º")
st.dataframe(grouped.sort_values(by="–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False), use_container_width=True)

# –¢–æ–ø –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
st.subheader("üí∞ –¢–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
top_costs = grouped.sort_values(by="–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False).head(10)
fig, ax = plt.subplots(figsize=(10, 5))
sns.barplot(x="–°—Ç–æ–∏–º–æ—Å—Ç—å", y="–¢–æ–≤–∞—Ä", data=top_costs, ax=ax)
ax.set_title("–¢–æ–ø-10 –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
st.pyplot(fig)

# –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
st.subheader("‚öñÔ∏è –¢–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
top_qty = grouped.sort_values(by="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ascending=False).head(10)
fig2, ax2 = plt.subplots(figsize=(10, 5))
sns.barplot(x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="–¢–æ–≤–∞—Ä", data=top_qty, ax=ax2)
ax2.set_title("–¢–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
st.pyplot(fig2)

# –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç –º–µ—Å—è—Ü–∞
st.subheader(f"üíé –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç –∑–∞ {selected_month}")
if not filtered.empty:
    top_item = filtered.groupby("–¢–æ–≤–∞—Ä")["–°—Ç–æ–∏–º–æ—Å—Ç—å"].sum().sort_values(ascending=False).idxmax()
    top_value = filtered.groupby("–¢–æ–≤–∞—Ä")["–°—Ç–æ–∏–º–æ—Å—Ç—å"].sum().max()
    st.markdown(f"**{top_item}** ‚Äî {top_value:,.2f} ‚ÇΩ")
else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü.")

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
st.subheader("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
st.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{filtered['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum():,.2f} ‚ÇΩ")
st.metric("–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π", filtered.shape[0])
st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", grouped.shape[0])
