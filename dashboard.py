# foodcost_dashboard_multi_sheets.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import re
from urllib.parse import urlparse, parse_qs

st.set_page_config(page_title="–§—É–¥–∫–æ—Å—Ç ‚Äî –¥—ç—à–±–æ—Ä–¥ (–º—É–ª—å—Ç–∏-–ª–∏—Å—Ç—ã)", layout="wide")

# ===== –ö–æ–ª–æ–Ω–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º (1-–±–∞–∑–Ω—ã–µ) =====
COL_D, COL_E, COL_F, COL_G, COL_N = 4, 5, 6, 7, 14  # D, E, F, G, N

# ===== –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ =====
CATEGORY_KEYWORDS = {
    "–ú—è—Å–æ": ["–≥–æ–≤—è–¥–∏–Ω","–±–∞—Ä–∞–Ω–∏–Ω","—Å–≤–∏–Ω–∏–Ω","—Ç–µ–ª—è—Ç–∏–Ω","–º—è—Å","—Ñ–∞—Ä—à","–≤—ã—Ä–µ–∑–∫","—Å—Ç–µ–π–∫","–±–µ–∫–æ–Ω","–≤–µ—Ç—á–∏–Ω","—Ä–µ–±—Ä","—à–µ—è","–ø–ª–µ—á–æ","–æ–∫–æ—Ä–æ–∫","–∫–æ—Ä–µ–π–∫","—Ä–∏–±–∞–π","—Ñ–ª—ç–Ω–∫","—Ñ–ª–∞–Ω–∫","–ø–æ—Ä–æ—Å"],
    "–ü—Ç–∏—Ü–∞": ["–∫—É—Ä","–∏–Ω–¥–µ–π–∫","—É—Ç–∫","—Ü—ã–ø–ª","—Ü—ã–ø–ª—è—Ç","–±—Ä–æ–π–ª","–±–µ–¥—Ä–æ","–≥—Ä—É–¥–∫","–∫—Ä—ã–ª—ã—à","–æ–∫–æ—Ä–æ—á","–ø–µ—á–µ–Ω—å –∫—É—Ä","—Å–µ—Ä–¥–µ—á–∫","–∂–µ–ª—É–¥–∫"],
    "–†—ã–±–∞/–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã": ["–ª–æ—Å–æ—Å","—Å–µ–º–≥","—Ñ–æ—Ä–µ–ª","—Å–∏–±–∞—Å","–¥–æ—Ä–∞–¥–æ","—Ç—É–Ω–µ—Ü","—Ç—Ä–µ—Å–∫","—Ö–µ–∫","–æ–∫—É–Ω","—â—É–∫","—Å–∫—É–º–±—Ä","–∫–∞–º–±–∞–ª","–∞–Ω—á–æ—É—Å","—Å–µ–ª—å–¥","–∫—Ä–µ–≤–µ—Ç","–º–∏–¥","–∫–∞–ª—å–º–∞—Ä","–æ—Å—å–º–∏–Ω–æ–≥","–æ—Å—å–º–∏–Ω–æ–≥–∏","–≥—Ä–µ–±–µ—à","–∫—Ä–∞–±","—É—Å—Ç—Ä–∏—Ü","–º–∞—Å–ª—è–Ω–∞—è —Ä—ã–±–∞"],
    "–°—ã—Ä": ["—Å—ã—Ä","–º–æ—Ü–∞—Ä–µ–ª–ª","–ø–∞—Ä–º–µ–∑","–±—Ä–∏","—Ñ–µ—Ç","—á–µ–¥–¥–µ—Ä","–≥–æ—Ä–≥–æ–Ω–∑–æ–ª","–º–∞—Å–∫–∞—Ä–ø–æ–Ω","—Ä–∏–∫–æ—Ç—Ç","—Å—É–ª—É–≥—É–Ω–∏","–±—Ä—ã–Ω–∑","—ç–º–º–µ–Ω—Ç–∞–ª","–¥–æ—Ä–±–ª—é","–∫–∞–º–∞–º–±–µ—Ä","–ø–ª–∞–≤–ª–µ–Ω","—Å–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä","–∫—Ä–µ–º-—Å—ã—Ä","–≥–∞—É–¥","—Ö–∞–ª—É–º","—Ö–∞–ª—É–º–∏"],
    "–ú–æ–ª–æ—á–∫–∞": ["—Å–ª–∏–≤–∫","–º–∞—Å–ª–æ —Å–ª–∏–≤","–º–æ–ª–æ–∫","–π–æ–≥—É—Ä—Ç","—Å–º–µ—Ç–∞–Ω","—Ç–≤–æ—Ä–æ–≥","—Ä—è–∂–µ–Ω–∫","–∫–µ—Ñ–∏—Ä","—Å–≥—É—â–µ–Ω","—Å—ã–≤–æ—Ä–æ—Ç–∫"],
    "–§—Ä—É–∫—Ç—ã/–æ–≤–æ—â–∏": ["–ø–æ–º–∏–¥","—Ç–æ–º–∞—Ç","–æ–≥—É—Ä","–ª—É–∫","–∫–∞—Ä—Ç–æ—Ñ","–∫–∞–ø—É—Å—Ç","–ø–µ—Ä–µ—Ü","–±–∞–∫–ª–∞–∂","–∫–∞–±–∞—á","—Ü—É–∫–∫–∏–Ω","–º–æ—Ä–∫–æ–≤","—Å–≤–µ–∫–ª","—á–µ—Å–Ω–æ–∫","–∏–º–±–∏—Ä","–∑–µ–ª–µ–Ω—å","—É–∫—Ä–æ–ø","–ø–µ—Ç—Ä—É—à","–∫–∏–Ω–∑","–±–∞–∑–∏–ª–∏–∫","—à–ø–∏–Ω–∞—Ç","—Å–µ–ª—å–¥–µ—Ä","—Ä—É–∫–æ–ª","—Ñ–µ–Ω—Ö–µ–ª","–ª–∏–º–æ–Ω","–ª–∞–π–º","–∞–ø–µ–ª—å—Å","—è–±–ª–æ–∫","–≥—Ä—É—à","–º–∞–Ω–≥–æ","–≤–∏–Ω–æ–≥—Ä–∞–¥","–∞–Ω–∞–Ω–∞—Å","–≥—Ä–∞–Ω–∞—Ç","–∫–∏–≤–∏","–∞–≤–æ–∫–∞–¥–æ","—á–µ—Ä—Ä–∏","–º–∞—Å–ª–∏–Ω","–æ–ª–∏–≤","–≥–æ—Ä–æ—à–µ–∫","–±—Ä–æ–∫–∫–æ–ª","–∞–π—Å–±–µ—Ä–≥","–≤–µ—à–µ–Ω","—Ä–æ–∑–º–∞—Ä","—ç—Å—Ç—Ä–∞–≥–æ–Ω","—Ç–∞—Ä—Ö—É–Ω","–º—è—Ç","–≤–∏—à–Ω","–∫–ª—É–±–Ω–∏–∫","—Å–ø–∞—Ä–∂"],
    "–ë–∞–∫–∞–ª–µ—è": ["–º—É–∫","—Å–∞—Ö–∞—Ä","—Å–æ–ª—å","—Ä–∏—Å","–∫—Ä—É–ø","–≥—Ä–µ—á","–æ–≤—Å—è–Ω","–º–∞–∫–∞—Ä–æ–Ω","–∫–∞–∫–∞–æ","–¥—Ä–æ–∂–∂","–∫—Ä–∞—Ö–º–∞–ª","–∫—É—Å–∫—É—Å","–±—É–ª–≥—É—Ä","—á–µ—á–µ–≤–∏—Ü","–Ω—É—Ç","—Ñ–∞—Å–æ–ª","–ø–∞–Ω–∏—Ä–æ–≤","–≤–∞–Ω–∏–ª–∏","—Ä–∞–∑—Ä—ã—Ö–ª","—Å–æ–¥–∞","–æ—Ä–µ—Ö","—Å–µ–º–µ—á","–∏–∑—é–º","—à–æ–∫–æ–ª–∞–¥","—Å–∏—Ä–æ–ø","–º–∞—Å–ª–æ —Ä–∞—Å—Ç","–æ–ª–∏–≤–∫–æ–≤","–ø–∞–Ω–∫–æ","—É–∫—Å—É—Å","—è–π—Ü","–∂–µ–ª—Ç–æ–∫","–±–µ–ª–æ–∫","—Å—Ç—Ä—É–∂–∫ –∫–æ–∫–æ—Å","—Ö–æ–Ω–¥–∞—à–∏","–±–∞–¥—å—è–Ω","–æ—Ä–µ–≥–∞–Ω","—Ç–∏–º—å—è–Ω","—á–∞–±—Ä–µ—Ü","–∫–æ—Ä–∏–∞–Ω–¥—Ä","–ø–∞–ø—Ä–∏–∫","—Ñ–∏—Å—Ç–∞—à","–∫–∞–ø–µ—Ä—Å","–∫—É–Ω–∂—É—Ç","–±—É–ª—å–æ–Ω"],
    "–•–ª–µ–±/–≤—ã–ø–µ—á–∫–∞": ["–ª–∞–≤–∞—à","–±—É–ª–∫","–±—É–ª–æ—á–∫","—Ö–ª–µ–±","–ª–µ–ø–µ—à","—Ç–æ—Ä—Ç–∏–ª—å","–ø–∏—Ç–∞","–±–∞–≥–µ—Ç","—á–∏–∞–±–∞—Ç","—Ç–µ—Å—Ç–æ","—Å–ª–æ–µ–Ω","–±—É—Ä–≥–µ—Ä –±—É–ª","–±—É–ª–æ—á–∫–∏ –¥–ª—è –±—É—Ä–≥–µ—Ä–∞","—Ç–æ—Ä—Ç–∏–ª—å—è"],
    "–°–æ—É—Å—ã": ["—Å–æ—É—Å","–∫–µ—Ç—á—É–ø","–≥–æ—Ä—á–∏—Ü","–º–∞–π–æ–Ω–µ–∑","–ø–∞—Å—Ç —Ç–æ–º–∞—Ç","–∞–¥–∂–∏–∫","—Å–æ–µ–≤","—Ç–µ—Ä–∏—è–∫","—Ç–∞–±–∞—Å–∫","—Ç–∞—Ä—Ç–∞—Ä","–ø–µ—Å—Ç–æ","—Ü–µ–∑–∞—Ä","—Ö–æ–π—Å–∏–Ω","—É—Å—Ç—Ä–∏—á","–≤–∞—Å–∞–±","–¥–µ–º–∏","–±–∞—Ä–±–µ–∫—é","—Ç–∫–µ–º–∞–ª","—Å–∞–ª—å—Å"],
    "–ü—Ä–æ—á–µ–µ": []
}
RU_MONTHS = {1:"–Ø–Ω–≤–∞—Ä—å",2:"–§–µ–≤—Ä–∞–ª—å",3:"–ú–∞—Ä—Ç",4:"–ê–ø—Ä–µ–ª—å",5:"–ú–∞–π",6:"–ò—é–Ω—å",7:"–ò—é–ª—å",8:"–ê–≤–≥—É—Å—Ç",9:"–°–µ–Ω—Ç—è–±—Ä—å",10:"–û–∫—Ç—è–±—Ä—å",11:"–ù–æ—è–±—Ä—å",12:"–î–µ–∫–∞–±—Ä—å"}

def detect_category(name: str) -> str:
    s = str(name).lower()
    for cat, keys in CATEGORY_KEYWORDS.items():
        if cat == "–ü—Ä–æ—á–µ–µ": continue
        for k in keys:
            if k in s: return cat
    return "–ü—Ä–æ—á–µ–µ"

def normalize_numeric(series: pd.Series) -> pd.Series:
    return pd.to_numeric(
        series.astype(str).str.replace("\u00a0"," ", regex=False).str.replace(" ","", regex=False).str.replace(",",".", regex=False),
        errors="coerce"
    )

def guess_course_from_url(url: str, fallback: str) -> str:
    # –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å gid, —á—Ç–æ–±—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å –ª–∏—Å—Ç—ã
    try:
        q = parse_qs(urlparse(url).query)
        gid = q.get("gid", [""])[0]
        return f"{fallback} (gid={gid})" if gid else fallback
    except Exception:
        return fallback

@st.cache_data(show_spinner=True)
def read_sheet_by_positions(url: str) -> pd.DataFrame:
    # —á–∏—Ç–∞–µ–º CSV (–ø—Ä–æ–±—É–µ–º –∏ ; –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
    try:
        raw = pd.read_csv(url, header=0, dtype=str)
    except Exception:
        raw = pd.read_csv(url, header=0, dtype=str, sep=";")
    # –ø–æ–∑–∏—Ü–∏–∏ (0-–±–∞–∑–Ω—ã–µ)
    d, e, f, g, n = COL_D-1, COL_E-1, COL_F-1, COL_G-1, COL_N-1
    ncols = raw.shape[1]
    if max(d,e,f,g,n) >= ncols:
        return pd.DataFrame()  # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞
    prod = (raw.iloc[:, d].fillna("") + " " + raw.iloc[:, e].fillna("")).str.strip()
    unit = raw.iloc[:, f] if f < ncols else ""
    qty  = raw.iloc[:, g] if g < ncols else ""
    cost = raw.iloc[:, n] if n < ncols else ""
    df = pd.DataFrame({
        "–¢–æ–≤–∞—Ä": prod,
        "–ï–¥. –∏–∑–º.": unit,
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": normalize_numeric(qty),
        "–°—Ç–æ–∏–º–æ—Å—Ç—å": normalize_numeric(cost),
        "–î–∞—Ç–∞": pd.NaT
    })
    df = df[df["–¢–æ–≤–∞—Ä"].astype(str).str.strip() != ""].copy()
    df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = df["–¢–æ–≤–∞—Ä"].apply(detect_category)
    df["–ì–æ–¥"] = pd.NaT
    df["–ú–µ—Å—è—Ü"] = pd.NaT
    return df

# ---------- UI: —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ ----------
st.sidebar.header("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ (–ª–∏—Å—Ç—ã Google Sheets)")
urls_text = st.sidebar.text_area(
    "–í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫–∏ CSV –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É (–Ω–∞—á–∏–Ω–∞—è —Å ¬´–≠–∫—Å–ø—Ä–µ—Å—Å –∏–Ω—Ç–µ–Ω—Å–∏–≤¬ª –∏ –¥–∞–ª—å—à–µ):",
    value="https://docs.google.com/spreadsheets/d/e/2PACX-1vT0eKDqy05ncTpiWM0oFxv-dthUJ53rPIMf5A-NFCBAJSrLEDRjHdpz2eNnmR192e5eZMD05Ua4bMD7/pub?gid=0&single=true&output=csv",
    height=150
)
courses_text = st.sidebar.text_area(
    "–ò–º–µ–Ω–∞ –∫—É—Ä—Å–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É, –≤ —Ç–æ–π –∂–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏):",
    value="–≠–∫—Å–ø—Ä–µ—Å—Å –∏–Ω—Ç–µ–Ω—Å–∏–≤",
    height=100
)
urls = [u.strip() for u in urls_text.splitlines() if u.strip()]
course_names = [c.strip() for c in courses_text.splitlines() if c.strip()]
while len(course_names) < len(urls):
    course_names.append(guess_course_from_url(urls[len(course_names)], f"–ö—É—Ä—Å #{len(course_names)+1}"))

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ ----------
frames = []
for url, cname in zip(urls, course_names):
    df_sheet = read_sheet_by_positions(url)
    if df_sheet.empty:
        continue
    df_sheet["–ö—É—Ä—Å—ã"] = cname
    frames.append(df_sheet)

df = pd.concat(frames, ignore_index=True) if frames else pd.DataFrame(columns=["–¢–æ–≤–∞—Ä","–ï–¥. –∏–∑–º.","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–°—Ç–æ–∏–º–æ—Å—Ç—å","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ","–ö—É—Ä—Å—ã","–î–∞—Ç–∞","–ì–æ–¥","–ú–µ—Å—è—Ü"])

st.title("üìä –î—ç—à–±–æ—Ä–¥ –ø–æ —Ñ—É–¥–∫–æ—Å—Ç—É –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ (–º—É–ª—å—Ç–∏-–ª–∏—Å—Ç—ã)")

with st.expander("üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"):
    st.write("–ö–æ–ª-–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:", len(urls))
    st.write("–ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:")
    st.dataframe(df.head(20), use_container_width=True)
    st.write("–†–∞–∑–º–µ—Ä:", df.shape)

if df.empty:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∫–∞–∫ CSV, –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç (D+E, F, G, N).")
    st.stop()

# ---------- –§–∏–ª—å—Ç—Ä—ã ----------
with st.sidebar:
    st.header("–§–∏–ª—å—Ç—Ä—ã")
    course_opts = sorted(df["–ö—É—Ä—Å—ã"].dropna().unique().tolist())
    selected_course = st.multiselect("–ö—É—Ä—Å—ã", options=course_opts)
    unit_opts = sorted(df["–ï–¥. –∏–∑–º."].dropna().astype(str).unique().tolist())
    selected_unit = st.multiselect("–ï–¥. –∏–∑–º.", options=unit_opts)
    cat_opts = sorted(df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].dropna().astype(str).unique().tolist())
    selected_category = st.multiselect("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", options=cat_opts)

filtered = df.copy()
if selected_course:
    filtered = filtered[filtered["–ö—É—Ä—Å—ã"].isin(selected_course)]
if selected_unit:
    filtered = filtered[filtered["–ï–¥. –∏–∑–º."].astype(str).isin(selected_unit)]
if selected_category:
    filtered = filtered[filtered["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].astype(str).isin(selected_category)]

if filtered.empty:
    st.info("–ü–æ —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
    st.stop()

# ---------- –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º ----------
st.subheader("üì¶ –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º")
grouped = (
    filtered.groupby(["–¢–æ–≤–∞—Ä","–ï–¥. –∏–∑–º.","–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], dropna=False)
    .agg({"–°—Ç–æ–∏–º–æ—Å—Ç—å":"sum","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ":"sum","–ö—É—Ä—Å—ã":lambda x: ", ".join(sorted(set(map(str, x))))})
    .reset_index()
    .sort_values("–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False)
)
st.dataframe(grouped, use_container_width=True)

# ---------- –ì—Ä–∞—Ñ–∏–∫–∏ ----------
st.subheader("üí∞ –¢–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
top_costs = grouped.head(10)
if not top_costs.empty:
    fig, ax = plt.subplots(figsize=(10,5))
    sns.barplot(x="–°—Ç–æ–∏–º–æ—Å—Ç—å", y="–¢–æ–≤–∞—Ä", data=top_costs, ax=ax)
    ax.set_title("–¢–æ–ø-10 –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    st.pyplot(fig)
else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

st.subheader("‚öñÔ∏è –¢–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
top_qty = grouped.sort_values(by="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ascending=False).head(10)
if not top_qty.empty:
    fig2, ax2 = plt.subplots(figsize=(10,5))
    sns.barplot(x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="–¢–æ–≤–∞—Ä", data=top_qty, ax=ax2)
    ax2.set_title("–¢–æ–ø-10 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
    st.pyplot(fig2)
else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# ---------- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ----------
st.subheader("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —Ä–∞—Å—Ö–æ–¥—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
cat_agg = (
    filtered.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", dropna=False)
    .agg({"–°—Ç–æ–∏–º–æ—Å—Ç—å":"sum","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ":"sum"})
    .reset_index()
    .sort_values("–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False)
)
col1, col2 = st.columns(2)
with col1:
    fig3, ax3 = plt.subplots(figsize=(6,4))
    sns.barplot(x="–°—Ç–æ–∏–º–æ—Å—Ç—å", y="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", data=cat_agg.head(10), ax=ax3)
    ax3.set_xlabel("–°—Ç–æ–∏–º–æ—Å—Ç—å"); ax3.set_ylabel("")
    ax3.set_title("–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
    st.pyplot(fig3)
with col2:
    fig4, ax4 = plt.subplots(figsize=(6,4))
    sns.barplot(x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", data=cat_agg.sort_values("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ascending=False).head(10), ax=ax4)
    ax4.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"); ax4.set_ylabel("")
    ax4.set_title("–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
    st.pyplot(fig4)

# ---------- –ò—Ç–æ–≥–∏ ----------
st.subheader("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
c1, c2, c3 = st.columns(3)
c1.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{filtered['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum():,.2f} ‚ÇΩ")
c2.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫", f"{filtered.shape[0]:,}")
c3.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", f"{grouped[['–¢–æ–≤–∞—Ä','–ï–¥. –∏–∑–º.']].drop_duplicates().shape[0]:,}")

# ---------- –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä ¬´–ü—Ä–æ—á–µ–µ¬ª ----------
st.subheader("‚ùì –ü—Ä–æ—á–µ–µ ‚Äî —á—Ç–æ –µ—â—ë –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–ª–æ–≤–∞—Ä—ë–º")
other = filtered[filtered["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == "–ü—Ä–æ—á–µ–µ"]
if other.empty:
    st.success("–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.")
else:
    other_top = (
        other.groupby(["–¢–æ–≤–∞—Ä","–ö—É—Ä—Å—ã"], dropna=False)
        .agg({"–°—Ç–æ–∏–º–æ—Å—Ç—å":"sum","–ï–¥. –∏–∑–º.": lambda x: ", ".join(sorted(set(map(str, x))))})
        .reset_index()
        .rename(columns={"–ï–¥. –∏–∑–º.":"–ï–¥. –∏–∑–º. (–≤–∞—Ä–∏–∞–Ω—Ç—ã)"})
        .sort_values("–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False)
        .head(50)
    )
    st.write("–£—Ç–æ—á–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–∏—Ö –ø–æ–∑–∏—Ü–∏–π ‚Äî –¥–æ–±–∞–≤–ª—é –≤ —Å–ª–æ–≤–∞—Ä—å:")
    st.dataframe(other_top, use_container_width=True)
