import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
from pathlib import Path
import numpy as np

st.set_page_config(page_title="–§—É–¥–∫–æ—Å—Ç ‚Äî –¥—ç—à–±–æ—Ä–¥", layout="wide")

# =========================
# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
# =========================
CATEGORY_KEYWORDS = {
    "–ú—è—Å–æ": [
        "–≥–æ–≤—è–¥–∏–Ω", "–±–∞—Ä–∞–Ω–∏–Ω", "—Å–≤–∏–Ω–∏–Ω", "—Ç–µ–ª—è—Ç–∏–Ω", "–º—è—Å", "—Ñ–∞—Ä—à", "–≤—ã—Ä–µ–∑–∫",
        "—Å—Ç–µ–π–∫", "–±–µ–∫–æ–Ω", "–≤–µ—Ç—á–∏–Ω", "—Ä–µ–±—Ä", "—à–µ—è", "–ø–ª–µ—á–æ", "–æ–∫–æ—Ä–æ–∫", "–∫–æ—Ä–µ–π–∫",
        "—Ä–∏–±–∞–π", "—Ñ–ª—ç–Ω–∫", "—Ñ–ª–∞–Ω–∫", "–ø–æ—Ä–æ—Å"
    ],
    "–ü—Ç–∏—Ü–∞": [
        "–∫—É—Ä", "–∏–Ω–¥–µ–π–∫", "—É—Ç–∫", "—Ü—ã–ø–ª", "—Ü—ã–ø–ª—è—Ç", "–±—Ä–æ–π–ª",
        "–±–µ–¥—Ä–æ", "–≥—Ä—É–¥–∫", "–∫—Ä—ã–ª—ã—à", "–æ–∫–æ—Ä–æ—á", "–ø–µ—á–µ–Ω—å –∫—É—Ä", "—Å–µ—Ä–¥–µ—á–∫", "–∂–µ–ª—É–¥–∫"
    ],
    "–†—ã–±–∞/–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã": [
        "–ª–æ—Å–æ—Å", "—Å–µ–º–≥", "—Ñ–æ—Ä–µ–ª", "—Å–∏–±–∞—Å", "–¥–æ—Ä–∞–¥–æ", "—Ç—É–Ω–µ—Ü", "—Ç—Ä–µ—Å–∫", "—Ö–µ–∫",
        "–æ–∫—É–Ω", "—â—É–∫", "—Å–∫—É–º–±—Ä", "–∫–∞–º–±–∞–ª", "–∞–Ω—á–æ—É—Å", "—Å–µ–ª—å–¥", "–∫—Ä–µ–≤–µ—Ç", "–º–∏–¥",
        "–∫–∞–ª—å–º–∞—Ä", "–æ—Å—å–º–∏–Ω–æ–≥", "–æ—Å—å–º–∏–Ω–æ–≥–∏", "–≥—Ä–µ–±–µ—à", "–∫—Ä–∞–±", "—É—Å—Ç—Ä–∏—Ü", "–º–∞—Å–ª—è–Ω–∞—è —Ä—ã–±–∞"
    ],
    "–°—ã—Ä": [
        "—Å—ã—Ä", "–º–æ—Ü–∞—Ä–µ–ª–ª", "–ø–∞—Ä–º–µ–∑", "–±—Ä–∏", "—Ñ–µ—Ç", "—á–µ–¥–¥–µ—Ä", "–≥–æ—Ä–≥–æ–Ω–∑–æ–ª",
        "–º–∞—Å–∫–∞—Ä–ø–æ–Ω", "—Ä–∏–∫–æ—Ç—Ç", "—Å—É–ª—É–≥—É–Ω–∏", "–±—Ä—ã–Ω–∑", "—ç–º–º–µ–Ω—Ç–∞–ª", "–¥–æ—Ä–±–ª—é",
        "–∫–∞–º–∞–º–±–µ—Ä", "–ø–ª–∞–≤–ª–µ–Ω", "—Å–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä", "–∫—Ä–µ–º-—Å—ã—Ä", "–≥–∞—É–¥", "—Ö–∞–ª—É–º"
    ],
    "–ú–æ–ª–æ—á–∫–∞": [
        "—Å–ª–∏–≤–∫", "–º–∞—Å–ª–æ —Å–ª–∏–≤", "–º–æ–ª–æ–∫", "–π–æ–≥—É—Ä—Ç", "—Å–º–µ—Ç–∞–Ω", "—Ç–≤–æ—Ä–æ–≥",
        "—Ä—è–∂–µ–Ω–∫", "–∫–µ—Ñ–∏—Ä", "—Å–≥—É—â–µ–Ω", "—Å—ã–≤–æ—Ä–æ—Ç–∫"
    ],
    "–§—Ä—É–∫—Ç—ã/–æ–≤–æ—â–∏": [
        "–ø–æ–º–∏–¥", "—Ç–æ–º–∞—Ç", "–æ–≥—É—Ä", "–ª—É–∫", "–∫–∞—Ä—Ç–æ—Ñ", "–∫–∞–ø—É—Å—Ç", "–ø–µ—Ä–µ—Ü", "–±–∞–∫–ª–∞–∂",
        "–∫–∞–±–∞—á", "—Ü—É–∫–∫–∏–Ω", "–º–æ—Ä–∫–æ–≤", "—Å–≤–µ–∫–ª", "—á–µ—Å–Ω–æ–∫", "–∏–º–±–∏—Ä", "–∑–µ–ª–µ–Ω—å",
        "—É–∫—Ä–æ–ø", "–ø–µ—Ç—Ä—É—à", "–∫–∏–Ω–∑", "–±–∞–∑–∏–ª–∏–∫", "—à–ø–∏–Ω–∞—Ç", "—Å–µ–ª—å–¥–µ—Ä", "—Ä—É–∫–æ–ª",
        "—Ñ–µ–Ω—Ö–µ–ª", "–ª–∏–º–æ–Ω", "–ª–∞–π–º", "–∞–ø–µ–ª—å—Å", "—è–±–ª–æ–∫", "–≥—Ä—É—à", "–º–∞–Ω–≥–æ",
        "–≤–∏–Ω–æ–≥—Ä–∞–¥", "–∞–Ω–∞–Ω–∞—Å", "–≥—Ä–∞–Ω–∞—Ç", "–∫–∏–≤–∏", "–∞–≤–æ–∫–∞–¥–æ", "—á–µ—Ä—Ä–∏",
        "–º–∞—Å–ª–∏–Ω", "–æ–ª–∏–≤", "–≥–æ—Ä–æ—à–µ–∫", "–±—Ä–æ–∫–∫–æ–ª", "–∞–π—Å–±–µ—Ä–≥", "–≤–µ—à–µ–Ω", "—Ä–æ–∑–º–∞—Ä",
        "—ç—Å—Ç—Ä–∞–≥–æ–Ω", "—Ç–∞—Ä—Ö—É–Ω", "–º—è—Ç", "–≤–∏—à–Ω", "–∫–ª—É–±–Ω–∏–∫", "—Å–ø–∞—Ä–∂"
    ],
    "–ë–∞–∫–∞–ª–µ—è": [
        "–º—É–∫", "—Å–∞—Ö–∞—Ä", "—Å–æ–ª—å", "—Ä–∏—Å", "–∫—Ä—É–ø", "–≥—Ä–µ—á", "–æ–≤—Å—è–Ω", "–º–∞–∫–∞—Ä–æ–Ω", "–∫–∞–∫–∞–æ",
        "–¥—Ä–æ–∂–∂", "–∫—Ä–∞—Ö–º–∞–ª", "–∫—É—Å–∫—É—Å", "–±—É–ª–≥—É—Ä", "—á–µ—á–µ–≤–∏—Ü", "–Ω—É—Ç", "—Ñ–∞—Å–æ–ª",
        "–ø–∞–Ω–∏—Ä–æ–≤", "–≤–∞–Ω–∏–ª–∏", "—Ä–∞–∑—Ä—ã—Ö–ª", "—Å–æ–¥–∞", "–æ—Ä–µ—Ö", "—Å–µ–º–µ—á", "–∏–∑—é–º",
        "—à–æ–∫–æ–ª–∞–¥", "—Å–∏—Ä–æ–ø", "–º–∞—Å–ª–æ —Ä–∞—Å—Ç", "–æ–ª–∏–≤–∫–æ–≤", "–ø–∞–Ω–∫–æ", "—É–∫—Å—É—Å", "—è–π—Ü",
        "–∂–µ–ª—Ç–æ–∫", "–±–µ–ª–æ–∫", "—Å—Ç—Ä—É–∂–∫ –∫–æ–∫–æ—Å", "—Ö–æ–Ω–¥–∞—à–∏", "–±–∞–¥—å—è–Ω", "–æ—Ä–µ–≥–∞–Ω",
        "—Ç–∏–º—å—è–Ω", "—á–∞–±—Ä–µ—Ü", "–∫–æ—Ä–∏–∞–Ω–¥—Ä", "–ø–∞–ø—Ä–∏–∫", "—Ñ–∏—Å—Ç–∞—à", "–∫–∞–ø–µ—Ä—Å", "–∫—É–Ω–∂—É—Ç", "–±—É–ª—å–æ–Ω"
    ],
    "–•–ª–µ–±/–≤—ã–ø–µ—á–∫–∞": [
        "–ª–∞–≤–∞—à", "–±—É–ª–∫", "–±—É–ª–æ—á–∫", "—Ö–ª–µ–±", "–ª–µ–ø–µ—à", "—Ç–æ—Ä—Ç–∏–ª—å", "–ø–∏—Ç–∞",
        "–±–∞–≥–µ—Ç", "—á–∏–∞–±–∞—Ç", "—Ç–µ—Å—Ç–æ", "—Å–ª–æ–µ–Ω", "–±—É—Ä–≥–µ—Ä –±—É–ª", "–ª–∞–≤–∞—à", "—Ç–æ—Ä—Ç–∏–ª—å—è", "–±—É–ª–æ—á–∫–∏ –¥–ª—è –±—É—Ä–≥–µ—Ä–∞"
    ],
    "–°–æ—É—Å—ã": [
        "—Å–æ—É—Å", "–∫–µ—Ç—á—É–ø", "–≥–æ—Ä—á–∏—Ü", "–º–∞–π–æ–Ω–µ–∑", "–ø–∞—Å—Ç —Ç–æ–º–∞—Ç", "–∞–¥–∂–∏–∫", "—Å–æ–µ–≤",
        "—Ç–µ—Ä–∏—è–∫", "—Ç–∞–±–∞—Å–∫", "—Ç–∞—Ä—Ç–∞—Ä", "–ø–µ—Å—Ç–æ", "—Ü–µ–∑–∞—Ä", "—Ö–æ–π—Å–∏–Ω", "—É—Å—Ç—Ä–∏—á",
        "–≤–∞—Å–∞–±", "–¥–µ–º–∏", "–±–∞—Ä–±–µ–∫—é", "—Ç–∫–µ–º–∞–ª", "—Å–∞–ª—å—Å"
    ],
    "–ü—Ä–æ—á–µ–µ": []
}

RU_MONTHS = {1:"–Ø–Ω–≤–∞—Ä—å",2:"–§–µ–≤—Ä–∞–ª—å",3:"–ú–∞—Ä—Ç",4:"–ê–ø—Ä–µ–ª—å",5:"–ú–∞–π",6:"–ò—é–Ω—å",7:"–ò—é–ª—å",8:"–ê–≤–≥—É—Å—Ç",9:"–°–µ–Ω—Ç—è–±—Ä—å",10:"–û–∫—Ç—è–±—Ä—å",11:"–ù–æ—è–±—Ä—å",12:"–î–µ–∫–∞–±—Ä—å"}
KNOWN_CATS = list(CATEGORY_KEYWORDS.keys())

def detect_category(name: str) -> str:
    s = str(name).lower()
    for cat, keys in CATEGORY_KEYWORDS.items():
        if cat == "–ü—Ä–æ—á–µ–µ":
            continue
        for k in keys:
            if k in s:
                return cat
    return "–ü—Ä–æ—á–µ–µ"

# ======== –∑–∞–≥—Ä—É–∑–∫–∞ (CSV –∏–∑ –≤—ã–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ) ========
DATE_PAT = re.compile(r"(\d{2}\.\d{2}\.\d{4})")

@st.cache_data
def load_from_csv(path: str = "2025-10-05T13-35_export.csv"):
    df = pd.read_csv(path)
    if "–î–∞—Ç–∞" not in df.columns:
        df["–î–∞—Ç–∞"] = pd.NaT
    for col in ["–°—Ç–æ–∏–º–æ—Å—Ç—å","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors="coerce")
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–µ–ª—ã/—Ä–µ–≥–∏—Å—Ç—Ä)
    if "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" in df.columns:
        df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].astype(str).str.strip()
        df.loc[df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].isin(["", "nan", "None"]), "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = np.nan
    return df[["–¢–æ–≤–∞—Ä","–ï–¥. –∏–∑–º.","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–°—Ç–æ–∏–º–æ—Å—Ç—å","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ","–ö—É—Ä—Å—ã","–î–∞—Ç–∞"]]

@st.cache_data
def load_data():
    p_csv = Path("2025-10-05T13-35_export.csv")
    p_xlsx = Path("–§—É–¥–∫–æ—Å—Ç (1).xlsx")
    if p_csv.exists():
        df = load_from_csv(str(p_csv))
    elif p_xlsx.exists():
        # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å excel-–≤–µ—Ç–∫—É –∏–∑ –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏
        df = pd.DataFrame(columns=["–¢–æ–≤–∞—Ä","–ï–¥. –∏–∑–º.","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–°—Ç–æ–∏–º–æ—Å—Ç—å","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ","–ö—É—Ä—Å—ã","–î–∞—Ç–∞"])
    else:
        df = pd.DataFrame(columns=["–¢–æ–≤–∞—Ä","–ï–¥. –∏–∑–º.","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–°—Ç–æ–∏–º–æ—Å—Ç—å","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ","–ö—É—Ä—Å—ã","–î–∞—Ç–∞"])
    # –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], errors="coerce", dayfirst=True)
    df["–ì–æ–¥"] = df["–î–∞—Ç–∞"].dt.year
    df["–ú–µ—Å—è—Ü"] = df["–î–∞—Ç–∞"].dt.month
    return df

df = load_data()

# ======== –†–ï–ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø (—Ñ–∏–∫—Å "–æ—Å—å–º–∏–Ω–æ–≥–∏/–∞–≤–æ–∫–∞–¥–æ" –∏ —Ç.–ø.) ========
detected = df["–¢–æ–≤–∞—Ä"].apply(detect_category)

# 1) –µ—Å–ª–∏ –¥–µ—Ç–µ–∫—Ç –¥–∞–ª –Ω–µ "–ü—Ä–æ—á–µ–µ" ‚Äî –≤—Å–µ–≥–¥–∞ –±–µ—Ä—ë–º –µ–≥–æ
# 2) –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –∏–∑ KNOWN_CATS ‚Äî –±–µ—Ä—ë–º –¥–µ—Ç–µ–∫—Ç
# 3) –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é
orig = df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].astype(str).str.strip()
use_orig = orig.isin(KNOWN_CATS) & (detected.eq("–ü—Ä–æ—á–µ–µ"))
df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = np.where(use_orig, orig, detected)

st.title("üìä –î—ç—à–±–æ—Ä–¥ –ø–æ —Ñ—É–¥–∫–æ—Å—Ç—É –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")

# ======== –§–∏–ª—å—Ç—Ä—ã ========
with st.sidebar:
    st.header("–§–∏–ª—å—Ç—Ä—ã")

    # –º–µ—Å—è—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä (–µ—Å–ª–∏ –¥–∞—Ç –Ω–µ—Ç ‚Äì –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
    if df["–ú–µ—Å—è—Ü"].notna().any() and df["–ì–æ–¥"].notna().any():
        years = sorted(df["–ì–æ–¥"].dropna().unique().tolist())
        months = sorted([int(m) for m in df["–ú–µ—Å—è—Ü"].dropna().unique().tolist() if 1 <= int(m) <= 12])
        selected_year = st.selectbox("–ì–æ–¥", options=years, index=len(years)-1)
        selected_month = st.selectbox("–ú–µ—Å—è—Ü –∑–∞–∫—É–ø–∫–∏", options=months, index=len(months)-1,
                                      format_func=lambda m: RU_MONTHS.get(int(m), str(m)))
    else:
        selected_year, selected_month = None, None

    # –∫—É—Ä—Å—ã –∏–∑ —Å–∫–ª–µ–π–∫–∏ "–ö—É—Ä—Å—ã"
    exploded = df["–ö—É—Ä—Å—ã"].dropna().astype(str).str.split(",").explode().str.strip()
    course_list = sorted(exploded.unique().tolist())
    selected_course = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å—ã", options=course_list)

    selected_unit = st.multiselect("–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è", options=sorted(df["–ï–¥. –∏–∑–º."].dropna().unique().tolist()))
    selected_category = st.multiselect("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", options=sorted(df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].dropna().unique().tolist()))

filtered = df.copy()
if selected_year is not None and selected_month is not None:
    filtered = filtered[(filtered["–ì–æ–¥"] == selected_year) & (filtered["–ú–µ—Å—è—Ü"] == selected_month)]
if selected_course:
    filtered = filtered[filtered["–ö—É—Ä—Å—ã"].fillna("").apply(
        lambda s: any(c in [x.strip() for x in str(s).split(",")] for c in selected_course)
    )]
if selected_unit:
    filtered = filtered[filtered["–ï–¥. –∏–∑–º."].isin(selected_unit)]
if selected_category:
    filtered = filtered[filtered["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].isin(selected_category)]

# ======== –¢–∞–±–ª–∏—Ü–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º ========
st.subheader("üì¶ –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º")
grouped = (
    filtered.groupby(["–¢–æ–≤–∞—Ä", "–ï–¥. –∏–∑–º.", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], dropna=False)
    .agg({"–°—Ç–æ–∏–º–æ—Å—Ç—å": "sum", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "sum", "–ö—É—Ä—Å—ã": lambda x: ", ".join(sorted(set(map(str, x))))})
    .reset_index()
    .rename(columns={"–ö—É—Ä—Å—ã": "–ö—É—Ä—Å—ã"})
    .sort_values(by="–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False)
)
st.dataframe(grouped, use_container_width=True)

# ======== –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ========
st.subheader("üí∞ –¢–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
top_costs = grouped.head(10)
fig, ax = plt.subplots(figsize=(10, 5))
sns.barplot(x="–°—Ç–æ–∏–º–æ—Å—Ç—å", y="–¢–æ–≤–∞—Ä", data=top_costs, ax=ax)
ax.set_title("–¢–æ–ø-10 –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
st.pyplot(fig)

st.subheader("‚öñÔ∏è –¢–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
top_qty = grouped.sort_values(by="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ascending=False).head(10)
fig2, ax2 = plt.subplots(figsize=(10, 5))
sns.barplot(x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="–¢–æ–≤–∞—Ä", data=top_qty, ax=ax2)
ax2.set_title("–¢–æ–ø-10 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
st.pyplot(fig2)

# ======== –ö–∞—Ç–µ–≥–æ—Ä–∏–π–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ========
st.subheader("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —Ä–∞—Å—Ö–æ–¥—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
cat_agg = (
    filtered.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", dropna=False)
    .agg({"–°—Ç–æ–∏–º–æ—Å—Ç—å": "sum", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "sum"})
    .reset_index()
    .sort_values("–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False)
)
col1, col2 = st.columns(2)
with col1:
    st.markdown("**–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏**")
    fig3, ax3 = plt.subplots(figsize=(6, 4))
    sns.barplot(x="–°—Ç–æ–∏–º–æ—Å—Ç—å", y="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", data=cat_agg.head(10), ax=ax3)
    ax3.set_xlabel("–°—Ç–æ–∏–º–æ—Å—Ç—å"); ax3.set_ylabel("")
    st.pyplot(fig3)
with col2:
    st.markdown("**–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É**")
    fig4, ax4 = plt.subplots(figsize=(6, 4))
    sns.barplot(x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", data=cat_agg.sort_values("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ascending=False).head(10), ax=ax4)
    ax4.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"); ax4.set_ylabel("")
    st.pyplot(fig4)

# ======== –ò—Ç–æ–≥–∏ ========
st.subheader("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
c1, c2, c3, c4 = st.columns(4)
c1.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{filtered['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum():,.2f} ‚ÇΩ")
c2.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫", f"{filtered.shape[0]:,}")
c3.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", f"{grouped[['–¢–æ–≤–∞—Ä','–ï–¥. –∏–∑–º.']].drop_duplicates().shape[0]:,}")
if filtered["–ú–µ—Å—è—Ü"].notna().any() and filtered["–ì–æ–¥"].notna().any():
    try:
        period_text = f"{RU_MONTHS.get(int(filtered['–ú–µ—Å—è—Ü'].dropna().iloc[0]), filtered['–ú–µ—Å—è—Ü'].dropna().iloc[0])} {int(filtered['–ì–æ–¥'].dropna().iloc[0])}"
        c4.metric("–ü–µ—Ä–∏–æ–¥ –≤—ã–±–æ—Ä–∫–∏", period_text)
    except Exception:
        c4.metric("–ü–µ—Ä–∏–æ–¥ –≤—ã–±–æ—Ä–∫–∏", "-")

# ======== –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä ¬´–ü—Ä–æ—á–µ–µ¬ª (–ø–æ—Å–ª–µ —Ä–µ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏) ========
st.subheader("‚ùì –ü—Ä–æ—á–µ–µ ‚Äî —á—Ç–æ –µ—â—ë –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–ª–æ–≤–∞—Ä—ë–º")
other = filtered[filtered["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == "–ü—Ä–æ—á–µ–µ"]
if other.empty:
    st.success("–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.")
else:
    other_top = (
        other.groupby(["–¢–æ–≤–∞—Ä"], dropna=False)
        .agg({"–°—Ç–æ–∏–º–æ—Å—Ç—å": "sum", "–ï–¥. –∏–∑–º.": lambda x: ", ".join(sorted(set(map(str, x)))) , "–ö—É—Ä—Å—ã": lambda x: ", ".join(sorted(set(map(str, x))))})
        .reset_index()
        .rename(columns={"–ï–¥. –∏–∑–º.": "–ï–¥. –∏–∑–º. (–≤–∞—Ä–∏–∞–Ω—Ç—ã)"})
        .sort_values("–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False)
        .head(50)
    )
    st.write("–ù–∏–∂–µ —Ç–æ–ø-50 ¬´–ü—Ä–æ—á–µ–µ¬ª. –ù–∞–ø–∏—à–∏, –∫—É–¥–∞ –∏—Ö –æ—Ç–Ω–µ—Å—Ç–∏ ‚Äî —è –¥–æ–ø–æ–ª–Ω—é —Å–ª–æ–≤–∞—Ä—å:")
    st.dataframe(other_top, use_container_width=True)
