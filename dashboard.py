# foodcost_dashboard.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import re

st.set_page_config(page_title="–§—É–¥–∫–æ—Å—Ç ‚Äî –¥—ç—à–±–æ—Ä–¥", layout="wide")

# ===== Google Sheets (Publish to Web ‚Üí CSV) =====
GOOGLE_SHEET_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vT0eKDqy05ncTpiWM0oFxv-dthUJ53rPIMf5A-NFCBAJSrLEDRjHdpz2eNnmR192e5eZMD05Ua4bMD7/pub?output=csv"

# ===== –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ (1-–±–∞–∑–Ω—ã–µ –±—É–∫–≤—ã) =====
# D + E ‚Üí –¢–æ–≤–∞—Ä, F ‚Üí –ï–¥. –∏–∑–º., G ‚Üí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, N ‚Üí –°—Ç–æ–∏–º–æ—Å—Ç—å
COL_D = 4   # 1-–±–∞–∑–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ D
COL_E = 5   # E
COL_F = 6   # F
COL_G = 7   # G
COL_N = 14  # N

# ===== –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ =====
CATEGORY_KEYWORDS = {
    "–ú—è—Å–æ": ["–≥–æ–≤—è–¥–∏–Ω","–±–∞—Ä–∞–Ω–∏–Ω","—Å–≤–∏–Ω–∏–Ω","—Ç–µ–ª—è—Ç–∏–Ω","–º—è—Å","—Ñ–∞—Ä—à","–≤—ã—Ä–µ–∑–∫","—Å—Ç–µ–π–∫",
             "–±–µ–∫–æ–Ω","–≤–µ—Ç—á–∏–Ω","—Ä–µ–±—Ä","—à–µ—è","–ø–ª–µ—á–æ","–æ–∫–æ—Ä–æ–∫","–∫–æ—Ä–µ–π–∫","—Ä–∏–±–∞–π","—Ñ–ª—ç–Ω–∫","—Ñ–ª–∞–Ω–∫","–ø–æ—Ä–æ—Å"],
    "–ü—Ç–∏—Ü–∞": ["–∫—É—Ä","–∏–Ω–¥–µ–π–∫","—É—Ç–∫","—Ü—ã–ø–ª","—Ü—ã–ø–ª—è—Ç","–±—Ä–æ–π–ª","–±–µ–¥—Ä–æ","–≥—Ä—É–¥–∫","–∫—Ä—ã–ª—ã—à","–æ–∫–æ—Ä–æ—á","–ø–µ—á–µ–Ω—å –∫—É—Ä","—Å–µ—Ä–¥–µ—á–∫","–∂–µ–ª—É–¥–∫"],
    "–†—ã–±–∞/–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã": ["–ª–æ—Å–æ—Å","—Å–µ–º–≥","—Ñ–æ—Ä–µ–ª","—Å–∏–±–∞—Å","–¥–æ—Ä–∞–¥–æ","—Ç—É–Ω–µ—Ü","—Ç—Ä–µ—Å–∫","—Ö–µ–∫","–æ–∫—É–Ω","—â—É–∫","—Å–∫—É–º–±—Ä",
                          "–∫–∞–º–±–∞–ª","–∞–Ω—á–æ—É—Å","—Å–µ–ª—å–¥","–∫—Ä–µ–≤–µ—Ç","–º–∏–¥","–∫–∞–ª—å–º–∞—Ä","–æ—Å—å–º–∏–Ω–æ–≥","–æ—Å—å–º–∏–Ω–æ–≥–∏","–≥—Ä–µ–±–µ—à","–∫—Ä–∞–±","—É—Å—Ç—Ä–∏—Ü","–º–∞—Å–ª—è–Ω–∞—è —Ä—ã–±–∞"],
    "–°—ã—Ä": ["—Å—ã—Ä","–º–æ—Ü–∞—Ä–µ–ª–ª","–ø–∞—Ä–º–µ–∑","–±—Ä–∏","—Ñ–µ—Ç","—á–µ–¥–¥–µ—Ä","–≥–æ—Ä–≥–æ–Ω–∑–æ–ª","–º–∞—Å–∫–∞—Ä–ø–æ–Ω","—Ä–∏–∫–æ—Ç—Ç",
            "—Å—É–ª—É–≥—É–Ω–∏","–±—Ä—ã–Ω–∑","—ç–º–º–µ–Ω—Ç–∞–ª","–¥–æ—Ä–±–ª—é","–∫–∞–º–∞–º–±–µ—Ä","–ø–ª–∞–≤–ª–µ–Ω","—Å–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä","–∫—Ä–µ–º-—Å—ã—Ä","–≥–∞—É–¥","—Ö–∞–ª—É–º","—Ö–∞–ª—É–º–∏"],
    "–ú–æ–ª–æ—á–∫–∞": ["—Å–ª–∏–≤–∫","–º–∞—Å–ª–æ —Å–ª–∏–≤","–º–æ–ª–æ–∫","–π–æ–≥—É—Ä—Ç","—Å–º–µ—Ç–∞–Ω","—Ç–≤–æ—Ä–æ–≥","—Ä—è–∂–µ–Ω–∫","–∫–µ—Ñ–∏—Ä","—Å–≥—É—â–µ–Ω","—Å—ã–≤–æ—Ä–æ—Ç–∫"],
    "–§—Ä—É–∫—Ç—ã/–æ–≤–æ—â–∏": ["–ø–æ–º–∏–¥","—Ç–æ–º–∞—Ç","–æ–≥—É—Ä","–ª—É–∫","–∫–∞—Ä—Ç–æ—Ñ","–∫–∞–ø—É—Å—Ç","–ø–µ—Ä–µ—Ü","–±–∞–∫–ª–∞–∂","–∫–∞–±–∞—á","—Ü—É–∫–∫–∏–Ω","–º–æ—Ä–∫–æ–≤","—Å–≤–µ–∫–ª","—á–µ—Å–Ω–æ–∫",
                     "–∏–º–±–∏—Ä","–∑–µ–ª–µ–Ω—å","—É–∫—Ä–æ–ø","–ø–µ—Ç—Ä—É—à","–∫–∏–Ω–∑","–±–∞–∑–∏–ª–∏–∫","—à–ø–∏–Ω–∞—Ç","—Å–µ–ª—å–¥–µ—Ä","—Ä—É–∫–æ–ª","—Ñ–µ–Ω—Ö–µ–ª",
                     "–ª–∏–º–æ–Ω","–ª–∞–π–º","–∞–ø–µ–ª—å—Å","—è–±–ª–æ–∫","–≥—Ä—É—à","–º–∞–Ω–≥–æ","–≤–∏–Ω–æ–≥—Ä–∞–¥","–∞–Ω–∞–Ω–∞—Å","–≥—Ä–∞–Ω–∞—Ç","–∫–∏–≤–∏","–∞–≤–æ–∫–∞–¥–æ","—á–µ—Ä—Ä–∏",
                     "–º–∞—Å–ª–∏–Ω","–æ–ª–∏–≤","–≥–æ—Ä–æ—à–µ–∫","–±—Ä–æ–∫–∫–æ–ª","–∞–π—Å–±–µ—Ä–≥","–≤–µ—à–µ–Ω","—Ä–æ–∑–º–∞—Ä","—ç—Å—Ç—Ä–∞–≥–æ–Ω","—Ç–∞—Ä—Ö—É–Ω","–º—è—Ç","–≤–∏—à–Ω","–∫–ª—É–±–Ω–∏–∫","—Å–ø–∞—Ä–∂"],
    "–ë–∞–∫–∞–ª–µ—è": ["–º—É–∫","—Å–∞—Ö–∞—Ä","—Å–æ–ª—å","—Ä–∏—Å","–∫—Ä—É–ø","–≥—Ä–µ—á","–æ–≤—Å—è–Ω","–º–∞–∫–∞—Ä–æ–Ω","–∫–∞–∫–∞–æ","–¥—Ä–æ–∂–∂","–∫—Ä–∞—Ö–º–∞–ª","–∫—É—Å–∫—É—Å","–±—É–ª–≥—É—Ä","—á–µ—á–µ–≤–∏—Ü",
                "–Ω—É—Ç","—Ñ–∞—Å–æ–ª","–ø–∞–Ω–∏—Ä–æ–≤","–≤–∞–Ω–∏–ª–∏","—Ä–∞–∑—Ä—ã—Ö–ª","—Å–æ–¥–∞","–æ—Ä–µ—Ö","—Å–µ–º–µ—á","–∏–∑—é–º","—à–æ–∫–æ–ª–∞–¥","—Å–∏—Ä–æ–ø","–º–∞—Å–ª–æ —Ä–∞—Å—Ç","–æ–ª–∏–≤–∫–æ–≤",
                "–ø–∞–Ω–∫–æ","—É–∫—Å—É—Å","—è–π—Ü","–∂–µ–ª—Ç–æ–∫","–±–µ–ª–æ–∫","—Å—Ç—Ä—É–∂–∫ –∫–æ–∫–æ—Å","—Ö–æ–Ω–¥–∞—à–∏","–±–∞–¥—å—è–Ω","–æ—Ä–µ–≥–∞–Ω","—Ç–∏–º—å—è–Ω","—á–∞–±—Ä–µ—Ü","–∫–æ—Ä–∏–∞–Ω–¥—Ä",
                "–ø–∞–ø—Ä–∏–∫","—Ñ–∏—Å—Ç–∞—à","–∫–∞–ø–µ—Ä—Å","–∫—É–Ω–∂—É—Ç","–±—É–ª—å–æ–Ω"],
    "–•–ª–µ–±/–≤—ã–ø–µ—á–∫–∞": ["–ª–∞–≤–∞—à","–±—É–ª–∫","–±—É–ª–æ—á–∫","—Ö–ª–µ–±","–ª–µ–ø–µ—à","—Ç–æ—Ä—Ç–∏–ª—å","–ø–∏—Ç–∞","–±–∞–≥–µ—Ç","—á–∏–∞–±–∞—Ç","—Ç–µ—Å—Ç–æ","—Å–ª–æ–µ–Ω",
                    "–±—É—Ä–≥–µ—Ä –±—É–ª","–±—É–ª–æ—á–∫–∏ –¥–ª—è –±—É—Ä–≥–µ—Ä–∞","—Ç–æ—Ä—Ç–∏–ª—å—è"],
    "–°–æ—É—Å—ã": ["—Å–æ—É—Å","–∫–µ—Ç—á—É–ø","–≥–æ—Ä—á–∏—Ü","–º–∞–π–æ–Ω–µ–∑","–ø–∞—Å—Ç —Ç–æ–º–∞—Ç","–∞–¥–∂–∏–∫","—Å–æ–µ–≤","—Ç–µ—Ä–∏—è–∫","—Ç–∞–±–∞—Å–∫","—Ç–∞—Ä—Ç–∞—Ä",
              "–ø–µ—Å—Ç–æ","—Ü–µ–∑–∞—Ä","—Ö–æ–π—Å–∏–Ω","—É—Å—Ç—Ä–∏—á","–≤–∞—Å–∞–±","–¥–µ–º–∏","–±–∞—Ä–±–µ–∫—é","—Ç–∫–µ–º–∞–ª","—Å–∞–ª—å—Å"],
    "–ü—Ä–æ—á–µ–µ": []
}
KNOWN_CATS = list(CATEGORY_KEYWORDS.keys())
RU_MONTHS = {1:"–Ø–Ω–≤–∞—Ä—å",2:"–§–µ–≤—Ä–∞–ª—å",3:"–ú–∞—Ä—Ç",4:"–ê–ø—Ä–µ–ª—å",5:"–ú–∞–π",6:"–ò—é–Ω—å",7:"–ò—é–ª—å",8:"–ê–≤–≥—É—Å—Ç",9:"–°–µ–Ω—Ç—è–±—Ä—å",10:"–û–∫—Ç—è–±—Ä—å",11:"–ù–æ—è–±—Ä—å",12:"–î–µ–∫–∞–±—Ä—å"}

def detect_category(name: str) -> str:
    s = str(name).lower()
    for cat, keys in CATEGORY_KEYWORDS.items():
        if cat == "–ü—Ä–æ—á–µ–µ": continue
        for k in keys:
            if k in s:
                return cat
    return "–ü—Ä–æ—á–µ–µ"

def normalize_numeric(series: pd.Series) -> pd.Series:
    return pd.to_numeric(
        series.astype(str)
              .str.replace("\u00a0", " ", regex=False)   # NBSP
              .str.replace(" ", "", regex=False)         # thousand sep
              .str.replace(",", ".", regex=False),       # comma ‚Üí dot
        errors="coerce"
    )

@st.cache_data(show_spinner=True)
def load_data_by_positions(url: str) -> pd.DataFrame:
    # —á–∏—Ç–∞–µ–º CSV (–∏ –Ω–∞ —Å–ª—É—á–∞–π ; –≤–º–µ—Å—Ç–æ ,)
    try:
        raw = pd.read_csv(url, header=0, dtype=str)
    except Exception:
        raw = pd.read_csv(url, header=0, dtype=str, sep=";")

    # –µ—Å–ª–∏ —Ñ–∞–π–ª —Å ¬´—à–∞–ø–∫–æ–π¬ª –≤—ã—à–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏–∏
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º 1-–±–∞–∑–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –≤ 0-–±–∞–∑–Ω—ã–µ
    d, e, f, g, n = COL_D-1, COL_E-1, COL_F-1, COL_G-1, COL_N-1
    ncols = raw.shape[1]
    if max(d,e,f,g,n) >= ncols:
        # –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–æ–∫ –º–µ–Ω—å—à–µ, –ø–æ–∫–∞–∂–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        return pd.DataFrame()

    # —Å–æ–±–∏—Ä–∞–µ–º —Ä–∞–±–æ—á–∏–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º (D+E ‚Üí –¢–æ–≤–∞—Ä)
    prod = raw.iloc[:, d].fillna("") + " " + raw.iloc[:, e].fillna("")
    prod = prod.str.strip()

    unit = raw.iloc[:, f] if f < ncols else ""
    qty  = raw.iloc[:, g] if g < ncols else ""
    cost = raw.iloc[:, n] if n < ncols else ""

    df = pd.DataFrame({
        "–¢–æ–≤–∞—Ä": prod,
        "–ï–¥. –∏–∑–º.": unit,
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": normalize_numeric(qty),
        "–°—Ç–æ–∏–º–æ—Å—Ç—å":  normalize_numeric(cost),
        # ¬´–ö—É—Ä—Å—ã¬ª –∏ ¬´–î–∞—Ç–∞¬ª –≤ —Ç–≤–æ—ë–º CSV –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî —Å—Ç–∞–≤–∏–º –ø—É—Å—Ç–æ
        "–ö—É—Ä—Å—ã": "",
        "–î–∞—Ç–∞":  pd.NaT,
    })

    # —á–∏—Å—Ç–∏–º –ø—É—Å—Ç—ã–µ —Ç–æ–≤–∞—Ä—ã
    df = df[df["–¢–æ–≤–∞—Ä"].astype(str).str.strip() != ""].copy()

    # –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
    df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = df["–¢–æ–≤–∞—Ä"].apply(detect_category)

    # –≥–æ–¥/–º–µ—Å—è—Ü (–Ω–µ—Ç –¥–∞—Ç ‚Äî –±—É–¥—É—Ç NaN, —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü–∞–º –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è)
    df["–ì–æ–¥"] = pd.to_datetime(df["–î–∞—Ç–∞"], errors="coerce").dt.year
    df["–ú–µ—Å—è—Ü"] = pd.to_datetime(df["–î–∞—Ç–∞"], errors="coerce").dt.month

    return df

df = load_data_by_positions(GOOGLE_SHEET_URL)

st.title("üìä –î—ç—à–±–æ—Ä–¥ –ø–æ —Ñ—É–¥–∫–æ—Å—Ç—É –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")

with st.expander("üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"):
    st.write("–ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è (D+E,F,G,N):")
    st.dataframe(df.head(20), use_container_width=True)
    st.write("–ö–æ–ª–æ–Ω–∫–∏:", list(df.columns))
    st.write("–†–∞–∑–º–µ—Ä:", df.shape)

if df.empty:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º D+E (—Ç–æ–≤–∞—Ä), F (–µ–¥.), G (–∫–æ–ª-–≤–æ), N (—Å—Ç–æ–∏–º–æ—Å—Ç—å). –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω—É–∂–Ω—ã–π –ª–∏—Å—Ç Google Sheets –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
    st.stop()

# ===== –§–∏–ª—å—Ç—Ä—ã =====
with st.sidebar:
    st.header("–§–∏–ª—å—Ç—Ä—ã")
    has_dates = df["–ú–µ—Å—è—Ü"].notna().any() and df["–ì–æ–¥"].notna().any()
    if has_dates:
        years  = sorted(df["–ì–æ–¥"].dropna().unique().tolist())
        months = sorted([int(m) for m in df["–ú–µ—Å—è—Ü"].dropna().unique().tolist() if 1 <= int(m) <= 12])
        selected_year  = st.selectbox("–ì–æ–¥", options=years, index=len(years)-1)
        selected_month = st.selectbox("–ú–µ—Å—è—Ü –∑–∞–∫—É–ø–∫–∏", options=months, index=len(months)-1,
                                      format_func=lambda m: RU_MONTHS.get(int(m), str(m)))
    else:
        selected_year, selected_month = None, None

    # –∫—É—Ä—Å—ã –≤ —ç—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ –ø—É—Å—Ç—ã–µ ‚Äî —Ñ–∏–ª—å—Ç—Ä –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –≤—ã–±–∏—Ä–∞—Ç—å
    exploded = df["–ö—É—Ä—Å—ã"].dropna().astype(str).str.split(",").explode().str.strip()
    course_opts = sorted([c for c in exploded.unique().tolist() if c])
    selected_course = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å—ã", options=course_opts) if course_opts else []

    unit_opts = sorted(df["–ï–¥. –∏–∑–º."].dropna().astype(str).unique().tolist())
    selected_unit = st.multiselect("–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è", options=unit_opts)

    cat_opts = sorted(df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].dropna().astype(str).unique().tolist())
    selected_category = st.multiselect("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", options=cat_opts)

filtered = df.copy()
if selected_year is not None and selected_month is not None:
    filtered = filtered[(filtered["–ì–æ–¥"] == selected_year) & (filtered["–ú–µ—Å—è—Ü"] == selected_month)]
if selected_course:
    filtered = filtered[filtered["–ö—É—Ä—Å—ã"].fillna("").apply(
        lambda s: any(c in [x.strip() for x in str(s).split(",")] for c in selected_course)
    )]
if selected_unit:
    filtered = filtered[filtered["–ï–¥. –∏–∑–º."].astype(str).isin(selected_unit)]
if selected_category:
    filtered = filtered[filtered["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].astype(str).isin(selected_category)]

if filtered.empty:
    st.info("–ü–æ —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
    st.stop()

# ===== –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º =====
st.subheader("üì¶ –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º")
grouped = (
    filtered.groupby(["–¢–æ–≤–∞—Ä","–ï–¥. –∏–∑–º.","–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], dropna=False)
    .agg({"–°—Ç–æ–∏–º–æ—Å—Ç—å":"sum","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ":"sum","–ö—É—Ä—Å—ã":lambda x: ", ".join(sorted(set(map(str, x))))})
    .reset_index()
    .sort_values("–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False)
)
st.dataframe(grouped, use_container_width=True)

# ===== –ì—Ä–∞—Ñ–∏–∫–∏ =====
st.subheader("üí∞ –¢–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
top_costs = grouped.head(10)
if not top_costs.empty:
    fig, ax = plt.subplots(figsize=(10,5))
    sns.barplot(x="–°—Ç–æ–∏–º–æ—Å—Ç—å", y="–¢–æ–≤–∞—Ä", data=top_costs, ax=ax)
    ax.set_title("–¢–æ–ø-10 –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    st.pyplot(fig)
else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

st.subheader("‚öñÔ∏è –¢–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
top_qty = grouped.sort_values(by="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ascending=False).head(10)
if not top_qty.empty:
    fig2, ax2 = plt.subplots(figsize=(10,5))
    sns.barplot(x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="–¢–æ–≤–∞—Ä", data=top_qty, ax=ax2)
    ax2.set_title("–¢–æ–ø-10 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
    st.pyplot(fig2)
else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# ===== –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ =====
st.subheader("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —Ä–∞—Å—Ö–æ–¥—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
cat_agg = (
    filtered.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", dropna=False)
    .agg({"–°—Ç–æ–∏–º–æ—Å—Ç—å":"sum","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ":"sum"})
    .reset_index()
    .sort_values("–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False)
)
col1, col2 = st.columns(2)
with col1:
    fig3, ax3 = plt.subplots(figsize=(6,4))
    sns.barplot(x="–°—Ç–æ–∏–º–æ—Å—Ç—å", y="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", data=cat_agg.head(10), ax=ax3)
    ax3.set_xlabel("–°—Ç–æ–∏–º–æ—Å—Ç—å"); ax3.set_ylabel("")
    ax3.set_title("–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
    st.pyplot(fig3)
with col2:
    fig4, ax4 = plt.subplots(figsize=(6,4))
    sns.barplot(x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", data=cat_agg.sort_values("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ascending=False).head(10), ax=ax4)
    ax4.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"); ax4.set_ylabel("")
    ax4.set_title("–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
    st.pyplot(fig4)

# ===== –ò—Ç–æ–≥–∏ =====
st.subheader("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
c1, c2, c3, c4 = st.columns(4)
c1.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{filtered['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum():,.2f} ‚ÇΩ")
c2.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫", f"{filtered.shape[0]:,}")
c3.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", f"{grouped[['–¢–æ–≤–∞—Ä','–ï–¥. –∏–∑–º.']].drop_duplicates().shape[0]:,}")
if filtered["–ú–µ—Å—è—Ü"].notna().any() and filtered["–ì–æ–¥"].notna().any():
    period_text = f"{RU_MONTHS.get(int(filtered['–ú–µ—Å—è—Ü'].dropna().iloc[0]), filtered['–ú–µ—Å—è—Ü'].dropna().iloc[0])} {int(filtered['–ì–æ–¥'].dropna().iloc[0])}"
    c4.metric("–ü–µ—Ä–∏–æ–¥ –≤—ã–±–æ—Ä–∫–∏", period_text)
else:
    c4.metric("–ü–µ—Ä–∏–æ–¥ –≤—ã–±–æ—Ä–∫–∏", "‚Äî")

# ===== –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä ¬´–ü—Ä–æ—á–µ–µ¬ª =====
st.subheader("‚ùì –ü—Ä–æ—á–µ–µ ‚Äî —á—Ç–æ –µ—â—ë –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–ª–æ–≤–∞—Ä—ë–º")
other = filtered[filtered["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == "–ü—Ä–æ—á–µ–µ"]
if other.empty:
    st.success("–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.")
else:
    other_top = (
        other.groupby(["–¢–æ–≤–∞—Ä"], dropna=False)
        .agg({"–°—Ç–æ–∏–º–æ—Å—Ç—å":"sum","–ï–¥. –∏–∑–º.": lambda x: ", ".join(sorted(set(map(str, x)))),"–ö—É—Ä—Å—ã": lambda x: ", ".join(sorted(set(map(str, x))))})
        .reset_index()
        .rename(columns={"–ï–¥. –∏–∑–º.":"–ï–¥. –∏–∑–º. (–≤–∞—Ä–∏–∞–Ω—Ç—ã)"})
        .sort_values("–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False)
        .head(50)
    )
    st.write("–ü–æ–¥—Å–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –Ω–∏–∂–µ ‚Äî –¥–æ–±–∞–≤–ª—é —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ —Å–ª–æ–≤–∞—Ä—å:")
    st.dataframe(other_top, use_container_width=True)
