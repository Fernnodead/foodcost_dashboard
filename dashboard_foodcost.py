import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re

st.set_page_config(page_title="–§—É–¥–∫–æ—Å—Ç ‚Äî –¥—ç—à–±–æ—Ä–¥", layout="wide")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
CATEGORY_KEYWORDS = {
    "–ú—è—Å–æ": ["–≥–æ–≤—è–¥–∏–Ω", "–±–∞—Ä–∞–Ω–∏–Ω", "—Å–≤–∏–Ω–∏–Ω", "–º—è—Å", "—Ñ–∞—Ä—à", "–≤—ã—Ä–µ–∑–∫", "—Å—Ç–µ–π–∫", "–±–µ–∫–æ–Ω", "–≤–µ—Ç—á–∏–Ω", "—Ç–µ–ª—è—Ç–∏–Ω", "—Ä–µ–±—Ä", "—à–µ—è"],
    "–ü—Ç–∏—Ü–∞": ["–∫—É—Ä", "–∏–Ω–¥–µ–π–∫", "—É—Ç–∫", "–±–µ–¥—Ä–æ", "–≥—Ä—É–¥–∫", "–∫—Ä—ã–ª—ã—à", "–æ–∫–æ—Ä–æ—á", "–ø–µ—á–µ–Ω—å –∫—É—Ä", "—Å–µ—Ä–¥–µ—á–∫", "–∂–µ–ª—É–¥–∫", "—Ü—ã–ø–ª"],
    "–†—ã–±–∞/–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã": ["–ª–æ—Å–æ—Å", "—Å–µ–º–≥", "—Ç—É–Ω–µ—Ü", "–¥–æ—Ä–∞–¥–æ", "—Å–∏–±–∞—Å", "—Ñ–æ—Ä–µ–ª", "—Ç—Ä–µ—Å–∫", "—Ö–µ–∫", "—â—É–∫", "–æ–∫—É–Ω", "—Å–∫—É–º–±—Ä", "–∫–∞–º–±–∞–ª", "—Å–µ–ª–µ–¥", "–∞–Ω—á–æ—É—Å",
                          "–∫—Ä–µ–≤–µ—Ç", "–º–∏–¥", "–∫–∞–ª—å–º–∞—Ä", "–æ—Å—å–º–∏–Ω–æ–≥", "–≥—Ä–µ–±–µ—à", "–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç", "—Ñ–∏–ª–µ —Ä—ã–±—ã","–ì—Ä–µ–±–µ—à–∫–∏ –æ—Ö–ª","–ì—Ä–µ–±–µ—à–∫–∏ –≤ —Ä–∞–∫–æ–≤–∏–Ω–µ"],
    "–°—ã—Ä": ["—Å—ã—Ä", "–º–æ—Ü–∞—Ä–µ–ª–ª", "–ø–∞—Ä–º–µ–∑", "—Ñ–µ—Ç", "–±—Ä–∏", "—á–µ–¥–¥–µ—Ä", "–≥–æ—Ä–≥–æ–Ω–∑–æ–ª", "–º–∞—Å–∫–∞—Ä–ø–æ–Ω", "—Ä–∏–∫–æ—Ç—Ç", "—Å—É–ª—É–≥—É–Ω–∏", "–±—Ä—ã–Ω–∑", "—ç–º–º–µ–Ω—Ç–∞–ª", "–¥–æ—Ä–±–ª—é", "–∫–∞–º–∞–º–±–µ—Ä"],
    "–ú–æ–ª–æ—á–∫–∞": ["—Å–ª–∏–≤–∫", "–º–∞—Å–ª–æ", "–º–æ–ª–æ–∫", "–π–æ–≥—É—Ä—Ç", "—Å–º–µ—Ç–∞–Ω", "—Ç–≤–æ—Ä–æ–≥", "–∫–µ—Ñ–∏—Ä", "—Ä—è–∂–µ–Ω–∫", "—Å–≥—É—â–µ–Ω"],
    "–§—Ä—É–∫—Ç—ã/–æ–≤–æ—â–∏": ["–ø–æ–º–∏–¥", "—Ç–æ–º–∞—Ç", "–æ–≥—É—Ä", "–ª—É–∫", "–∫–∞—Ä—Ç–æ—Ñ", "–ª–∏–º–æ–Ω", "—è–±–ª–æ–∫", "–∞–ø–µ–ª—å—Å", "–∑–µ–ª–µ–Ω—å", "–∫–∞–ø—É—Å—Ç", "–ø–µ—Ä–µ—Ü", "–±–∞–∫–ª–∞–∂–∞–Ω",
                     "—Ñ—Ä—É–∫—Ç", "–æ–≤–æ—â", "–º–∞–Ω–≥–æ", "–≤–∏–Ω–æ–≥—Ä–∞–¥", "–≥—Ä–∞–Ω–∞—Ç", "–≥—Ä—É—à–∞", "–∞–Ω–∞–Ω–∞—Å", "–º–æ—Ä–∫–æ–≤", "–∫–∞–±–∞—á", "—Ü—É–∫–∫–∏–Ω", "—Å–≤–µ–∫–ª", "—á–µ—Å–Ω–æ–∫",
                     "–∏–º–±–∏—Ä", "–∫–∏–Ω–∑", "–ø–µ—Ç—Ä—É—à", "—É–∫—Ä–æ–ø", "–±–∞–∑–∏–ª–∏–∫", "—à–ø–∏–Ω–∞—Ç", "—Å–µ–ª—å–¥–µ—Ä", "—Ä—É–∫–æ–ª", "—Ñ–µ–Ω—Ö–µ–ª", "–ª–∞–π–º", "–∫–∏–≤–∏", "–∞–≤–æ–∫–∞–¥–æ",
                     "–±—Ä–æ–∫–∫–æ–ª", "—Ü–≤–µ—Ç–Ω", "–∞–π—Å–±–µ—Ä–≥", "—Ä–æ–º—ç–Ω", "—Ä–µ–¥–∏—Å", "—á–µ—Ä—Ä–∏"],
    "–ë–∞–∫–∞–ª–µ—è": ["–º—É–∫", "—Å–∞—Ö–∞—Ä", "—Å–æ–ª—å", "—Ä–∏—Å", "–∫—Ä—É–ø", "—Å–ø–µ—Ü", "–≥—Ä–µ—á", "–æ–≤—Å—è–Ω", "–º–∞–∫–∞—Ä–æ–Ω", "–∫–∞–∫–∞–æ", "–¥—Ä–æ–∂–∂", "–∫—Ä–∞—Ö–º–∞–ª", "–∫—É—Å–∫—É—Å", "–±—É–ª–≥—É—Ä",
                "—á–µ—á–µ–≤–∏—Ü", "–Ω—É—Ç", "—Ñ–∞—Å–æ–ª", "–ø–∞–Ω–∏—Ä–æ–≤–æ—á", "–≤–∞–Ω–∏–ª–∏", "—Ä–∞–∑—Ä—ã—Ö–ª", "—Å–æ–¥–∞", "–æ—Ä–µ—Ö", "—Å–µ–º–µ—á–∫", "–∏–∑—é–º", "—à–æ–∫–æ–ª–∞–¥", "—Å–∏—Ä–æ–ø"],
    "–•–ª–µ–±/–≤—ã–ø–µ—á–∫–∞": ["–ª–∞–≤–∞—à", "–±—É–ª–∫", "—Ö–ª–µ–±", "–ª–µ–ø–µ—à", "—Ç–æ—Ä—Ç–∏–ª—å", "–ø–∏—Ç–∞", "–±–∞–≥–µ—Ç", "—á–∏–∞–±–∞—Ç", "—Ç–µ—Å—Ç–æ", "—Å–ª–æ–µ–Ω"],
    "–°–æ—É—Å—ã": ["—Å–æ—É—Å", "–∫–µ—Ç—á—É–ø", "–≥–æ—Ä—á–∏—Ü", "–º–∞–π–æ–Ω–µ–∑", "–ø–∞—Å—Ç —Ç–æ–º–∞—Ç", "–∞–¥–∂–∏–∫", "—Å–æ–µ–≤", "—Ç–µ—Ä–∏—è–∫", "—Ç–∞–±–∞—Å–∫", "—Ç–∞—Ä—Ç–∞—Ä", "–ø–µ—Å—Ç–æ", "—Ü–µ–∑–∞—Ä", "—Ö–æ–π—Å–∏–Ω", "—É—Å—Ç—Ä–∏—á", "–≤–∞—Å–∞–±"],
    "–ü—Ä–æ—á–µ–µ": []
}

RU_MONTHS = {
    1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å", 5: "–ú–∞–π", 6: "–ò—é–Ω—å",
    7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç", 9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
}

def detect_category(name: str) -> str:
    n = str(name).lower()
    for cat, keys in CATEGORY_KEYWORDS.items():
        if cat == "–ü—Ä–æ—á–µ–µ":
            continue
        for k in keys:
            if k in n:
                return cat
    return "–ü—Ä–æ—á–µ–µ"


# skiprows –∏ –¥–∞—Ç–∞

DATE_PAT = re.compile(r"(\d{2}\.\d{2}\.\d{4})")
PERIOD_PAT = re.compile(r"[–ü–ø]–µ—Ä–∏–æ–¥\s*[cs—Å]\s*(\d{2}\.\d{2}\.\d{4})\s*–ø–æ\s*(\d{2}\.\d{2}\.\d{4})")

def find_header_row(raw: pd.DataFrame, max_scan: int = 60) -> int | None:
    """–ù–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Å–æ–¥–µ—Ä–∂–∏—Ç '–¢–æ–≤–∞—Ä')."""
    for i in range(min(max_scan, len(raw))):
        row = raw.iloc[i].astype(str).str.lower().tolist()
        if any("—Ç–æ–≤–∞—Ä" in c for c in row):
            return i
    return None

def extract_period_from_top(raw: pd.DataFrame, head_scan: int = 12):
    """–ò—â–µ–º '–ü–µ—Ä–∏–æ–¥ c dd.mm.yyyy –ø–æ dd.mm.yyyy' –≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö."""
    txt = " ".join(
        " ".join(map(str, raw.iloc[i].dropna().tolist()))
        for i in range(min(head_scan, len(raw)))
    )
    m = PERIOD_PAT.search(txt)
    if not m:
        return None, None
    try:
        start = pd.to_datetime(m.group(1), dayfirst=True)
        end = pd.to_datetime(m.group(2), dayfirst=True)
        return start, end
    except Exception:
        return None, None

def choose_cost_column(cols: list[str]) -> str | None:
    """–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º '–û—Ç–ø—É—Å–∫–Ω—ã–µ —Å—É–º–º—ã', –∑–∞—Ç–µ–º —á—Ç–æ-—Ç–æ —Å–æ —Å–ª–æ–≤–æ–º '—Å—É–º–º'/'—Å—Ç–æ–∏–º'."""
    if "–û—Ç–ø—É—Å–∫–Ω—ã–µ —Å—É–º–º—ã" in cols:
        return "–û—Ç–ø—É—Å–∫–Ω—ã–µ —Å—É–º–º—ã"
    for c in cols:
        cl = str(c).lower()
        if "—Å—É–º–º" in cl or "—Å—Ç–æ–∏–º" in cl:
            return c
    return None

def choose_qty_column(cols: list[str]) -> str | None:
    if "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" in cols:
        return "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    return None

def choose_unit_column(cols: list[str]) -> str | None:
    if "–ï–¥. –∏–∑–º." in cols:
        return "–ï–¥. –∏–∑–º."
    return None

def extract_row_date_series(df: pd.DataFrame) -> pd.Series:
    """–î–∞—Ç—É —Å—Ç—Ä–æ–∫–∏: —è–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ '–î–∞—Ç–∞' –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ ('... –æ—Ç dd.mm.yyyy')."""
    # —è–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
    date_col = None
    for c in df.columns:
        if re.search(r"–¥–∞—Ç–∞|date", str(c).lower()):
            date_col = c
            break
    if date_col is not None:
        return pd.to_datetime(df[date_col], errors="coerce", dayfirst=True)

    # –ø–∞—Ä—Å–∏–º –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
    first_col = df.columns[0]
    s = df[first_col].astype(str).str.extract(DATE_PAT, expand=False)
    return pd.to_datetime(s, errors="coerce", dayfirst=True)

# ---------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∞–≤—Ç–æ skiprows + –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞)
# ---------------------------
@st.cache_data
def load_data(path: str = "–§—É–¥–∫–æ—Å—Ç (1).xlsx"):
    xls = pd.ExcelFile(path)
    all_rows = []

    for sheet in xls.sheet_names:
        if sheet in ["–§—É–¥–∫–æ—Å—Ç", "–¶–µ–Ω—ã —Å –Ω–æ–≤—ã–º —Ñ—É–¥–∫–æ—Å—Ç–æ–º"]:
            continue

        raw = pd.read_excel(path, sheet_name=sheet, header=None)
        header_row = find_header_row(raw)
        if header_row is None:
            continue

        period_start, period_end = extract_period_from_top(raw)

        df = pd.read_excel(path, sheet_name=sheet, skiprows=header_row)
        cols = list(df.columns)

        # –ù–∞–π–¥—ë–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        prod_col = "–¢–æ–≤–∞—Ä" if "–¢–æ–≤–∞—Ä" in df.columns else (df.columns[3] if len(df.columns) > 3 else df.columns[-1])
        unit_col = choose_unit_column(cols) or (df.columns[5] if len(df.columns) > 5 else df.columns[-1])
        qty_col = choose_qty_column(cols) or (df.columns[6] if len(df.columns) > 6 else df.columns[-1])
        cost_col = choose_cost_column(cols) or (df.columns[11] if len(df.columns) > 11 else df.columns[-1])

        tmp = df[[prod_col, unit_col, qty_col, cost_col]].copy()
        tmp.columns = ["–¢–æ–≤–∞—Ä", "–ï–¥. –∏–∑–º.", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—Ç–æ–∏–º–æ—Å—Ç—å"]
        tmp = tmp.dropna(subset=["–¢–æ–≤–∞—Ä"])

        # –ü—Ä–∏–≤–æ–¥–∏–º —á–∏—Å–ª–∞
        tmp["–°—Ç–æ–∏–º–æ—Å—Ç—å"] = pd.to_numeric(tmp["–°—Ç–æ–∏–º–æ—Å—Ç—å"], errors="coerce")
        tmp["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] = pd.to_numeric(tmp["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"], errors="coerce")

        # –ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã —É —Ç–µ–±—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ 2 —Å—Ç—Ä–æ–∫–∏:
        # tmp = tmp[(tmp["–°—Ç–æ–∏–º–æ—Å—Ç—å"] < 0) & (tmp["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] > 0)]
        # tmp["–°—Ç–æ–∏–º–æ—Å—Ç—å"] = tmp["–°—Ç–æ–∏–º–æ—Å—Ç—å"].abs()

        tmp["–ö—É—Ä—Å"] = sheet

        # –î–∞—Ç–∞
        row_dates = extract_row_date_series(df)
        tmp["–î–∞—Ç–∞"] = row_dates
        if tmp["–î–∞—Ç–∞"].isna().all():
            tmp["–î–∞—Ç–∞"] = period_start  # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å—Ç–∞–≤–∏–º –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞

        tmp["–î–∞—Ç–∞"] = pd.to_datetime(tmp["–î–∞—Ç–∞"], errors="coerce", dayfirst=True)

        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        tmp["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = tmp["–¢–æ–≤–∞—Ä"].apply(detect_category)

        all_rows.append(tmp)

    if not all_rows:
        return pd.DataFrame(columns=["–¢–æ–≤–∞—Ä", "–ï–¥. –∏–∑–º.", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–ö—É—Ä—Å", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–î–∞—Ç–∞", "–ì–æ–¥", "–ú–µ—Å—è—Ü"])

    out = pd.concat(all_rows, ignore_index=True)
    # –î–æ–±–∞–≤–∏–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    out["–ì–æ–¥"] = out["–î–∞—Ç–∞"].dt.year
    out["–ú–µ—Å—è—Ü"] = out["–î–∞—Ç–∞"].dt.month

    return out

df = load_data()

st.title("üìä –î—ç—à–±–æ—Ä–¥ –ø–æ —Ñ—É–¥–∫–æ—Å—Ç—É –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")

# ---------------------------
# –§–∏–ª—å—Ç—Ä—ã (–ø–æ –º–µ—Å—è—Ü—É –∏ –≥–æ–¥—É)
# ---------------------------
with st.sidebar:
    st.header("–§–∏–ª—å—Ç—Ä—ã")

    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥—ã/–º–µ—Å—è—Ü—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    if "–ì–æ–¥" in df.columns and df["–ì–æ–¥"].notna().any():
        available_years = sorted(df["–ì–æ–¥"].dropna().unique().tolist())
        selected_year = st.selectbox("–ì–æ–¥", options=available_years, index=len(available_years)-1)
    else:
        selected_year = None

    if "–ú–µ—Å—è—Ü" in df.columns and df["–ú–µ—Å—è—Ü"].notna().any():
        available_months = sorted([int(m) for m in df["–ú–µ—Å—è—Ü"].dropna().unique().tolist() if pd.notna(m) and m >= 1 and m <= 12])
        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        m_default_idx = len(available_months)-1 if available_months else 0
        selected_month = st.selectbox(
            "–ú–µ—Å—è—Ü",
            options=available_months,
            index=m_default_idx,
            format_func=lambda m: RU_MONTHS.get(int(m), str(m))
        )
    else:
        selected_month = None

    selected_course = st.multiselect("–ö—É—Ä—Å—ã", options=sorted(df["–ö—É—Ä—Å"].dropna().unique().tolist()))
    selected_unit = st.multiselect("–ï–¥. –∏–∑–º.", options=sorted(df["–ï–¥. –∏–∑–º."].dropna().unique().tolist()))
    selected_category = st.multiselect("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", options=sorted(df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].dropna().unique().tolist()))

# ---------------------------
# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
# ---------------------------
filtered = df.copy()

if selected_year is not None and selected_month is not None:
    filtered = filtered[(filtered["–ì–æ–¥"] == selected_year) & (filtered["–ú–µ—Å—è—Ü"] == selected_month)]

if selected_course:
    filtered = filtered[filtered["–ö—É—Ä—Å"].isin(selected_course)]
if selected_unit:
    filtered = filtered[filtered["–ï–¥. –∏–∑–º."].isin(selected_unit)]
if selected_category:
    filtered = filtered[filtered["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].isin(selected_category)]

# ---------------------------
# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
# ---------------------------
grouped = (
    filtered.groupby(["–¢–æ–≤–∞—Ä", "–ï–¥. –∏–∑–º."], dropna=False)
    .agg({"–°—Ç–æ–∏–º–æ—Å—Ç—å": "sum", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "sum", "–ö—É—Ä—Å": lambda x: ", ".join(sorted(set(map(str, x))))})
    .reset_index()
    .rename(columns={"–ö—É—Ä—Å": "–ö—É—Ä—Å—ã"})
)

# ---------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
# ---------------------------
st.subheader("üì¶ –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º")
st.dataframe(grouped.sort_values(by="–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False), use_container_width=True)


# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –¢–û–ü-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
st.subheader("üí∞ –¢–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
top_costs = grouped.sort_values(by="–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False).head(10)
fig, ax = plt.subplots(figsize=(10, 5))
sns.barplot(x="–°—Ç–æ–∏–º–æ—Å—Ç—å", y="–¢–æ–≤–∞—Ä", data=top_costs, ax=ax)
ax.set_title("–¢–æ–ø-10 –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
st.pyplot(fig)

st.subheader("‚öñÔ∏è –¢–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
top_qty = grouped.sort_values(by="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ascending=False).head(10)
fig2, ax2 = plt.subplots(figsize=(10, 5))
sns.barplot(x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="–¢–æ–≤–∞—Ä", data=top_qty, ax=ax2)
ax2.set_title("–¢–æ–ø-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
st.pyplot(fig2)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–π–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

st.subheader("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —Ä–∞—Å—Ö–æ–¥—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
cat_agg = (
    filtered.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", dropna=False)
    .agg({"–°—Ç–æ–∏–º–æ—Å—Ç—å": "sum", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "sum"})
    .reset_index()
    .sort_values("–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False)
)

col1, col2 = st.columns(2)
with col1:
    st.markdown("**–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏**")
    fig3, ax3 = plt.subplots(figsize=(6, 4))
    sns.barplot(x="–°—Ç–æ–∏–º–æ—Å—Ç—å", y="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", data=cat_agg.head(10), ax=ax3)
    ax3.set_xlabel("–°—Ç–æ–∏–º–æ—Å—Ç—å"); ax3.set_ylabel("")
    st.pyplot(fig3)

with col2:
    st.markdown("**–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É**")
    fig4, ax4 = plt.subplots(figsize=(6, 4))
    sns.barplot(x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", data=cat_agg.sort_values("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ascending=False).head(10), ax=ax4)
    ax4.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"); ax4.set_ylabel("")
    st.pyplot(fig4)

# –ò—Ç–æ–≥–∏

st.subheader("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
c1, c2, c3, c4 = st.columns(4)
c1.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{filtered['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum():,.2f} ‚ÇΩ")
c2.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫", f"{filtered.shape[0]:,}")
c3.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", f"{grouped.shape[0]:,}")
if "–î–∞—Ç–∞" in filtered.columns and filtered["–î–∞—Ç–∞"].notna().any():
    period_text = f"{RU_MONTHS.get(int(filtered['–ú–µ—Å—è—Ü'].iloc[0]), filtered['–ú–µ—Å—è—Ü'].iloc[0])} {int(filtered['–ì–æ–¥'].iloc[0])}" if not filtered.empty else "-"
    c4.metric("–ü–µ—Ä–∏–æ–¥ –≤—ã–±–æ—Ä–∫–∏", period_text)

# ¬´–ü—Ä–æ—á–µ–µ¬ª ‚Äî —á—Ç–æ–±—ã –¥–æ–æ–±—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å

st.subheader("‚ùì –ü—Ä–æ—á–µ–µ (–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–ª–æ–≤–∞—Ä—ë–º)")
other = filtered[filtered["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == "–ü—Ä–æ—á–µ–µ"]
if other.empty:
    st.success("–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.")
else:
    other_top = (
        other.groupby("–¢–æ–≤–∞—Ä", dropna=False)
        .agg({"–°—Ç–æ–∏–º–æ—Å—Ç—å": "sum", "–ï–¥. –∏–∑–º.": lambda x: ", ".join(sorted(set(map(str, x))))})
        .reset_index()
        .sort_values("–°—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False)
        .rename(columns={"–ï–¥. –∏–∑–º.": "–ï–¥. –∏–∑–º. (–≤–∞—Ä–∏–∞–Ω—Ç—ã)"})
        .head(50)
    )
    st.write("–ù–∏–∂–µ —Ç–æ–ø-50 ¬´–ü—Ä–æ—á–µ–µ¬ª –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ‚Äî –¥–æ–±–∞–≤—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —á–∞—Å—Ç–∏ —Å–ª–æ–≤ –≤ CATEGORY_KEYWORDS:")
    st.dataframe(other_top, use_container_width=True)
